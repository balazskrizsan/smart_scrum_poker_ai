/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.ssp_ai_backend.db.tables


import com.kbalazsworks.ssp_ai_backend.common.binder.PgVectorBinding
import com.kbalazsworks.ssp_ai_backend.db.Public
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_3072_QUESTION_ID_JIRA_ISSUE_ID_VECTOR_MODEL_ID_KEY
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_3072__VECTOR_STORE_3072_JIRA_ISSUE_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_3072__VECTOR_STORE_3072_QUESTION_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_3072__VECTOR_STORE_3072_VECTOR_MODEL_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.tables.JiraIssues.JiraIssuesPath
import com.kbalazsworks.ssp_ai_backend.db.tables.Questions.QuestionsPath
import com.kbalazsworks.ssp_ai_backend.db.tables.VectorModels.VectorModelsPath
import com.kbalazsworks.ssp_ai_backend.db.tables.records.VectorStore_3072Record
import com.pgvector.PGvector

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VectorStore_3072(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VectorStore_3072Record>?,
    parentPath: InverseForeignKey<out Record, VectorStore_3072Record>?,
    aliased: Table<VectorStore_3072Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VectorStore_3072Record>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vector_store_3072</code>
         */
        val VECTOR_STORE_3072: VectorStore_3072 = VectorStore_3072()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VectorStore_3072Record> = VectorStore_3072Record::class.java

    /**
     * The column <code>public.vector_store_3072.question_id</code>.
     */
    val QUESTION_ID: TableField<VectorStore_3072Record, Long?> = createField(DSL.name("question_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.vector_store_3072.jira_issue_id</code>.
     */
    val JIRA_ISSUE_ID: TableField<VectorStore_3072Record, Long?> = createField(DSL.name("jira_issue_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.vector_store_3072.vector_model_id</code>.
     */
    val VECTOR_MODEL_ID: TableField<VectorStore_3072Record, Long?> = createField(DSL.name("vector_model_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vector_store_3072.embedding</code>.
     */
    val EMBEDDING: TableField<VectorStore_3072Record, PGvector?> = createField(DSL.name("embedding"), DefaultDataType.getDefaultDataType("\"public\".\"vector\"").nullable(false), this, "", PgVectorBinding())

    private constructor(alias: Name, aliased: Table<VectorStore_3072Record>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VectorStore_3072Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VectorStore_3072Record>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vector_store_3072</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vector_store_3072</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vector_store_3072</code> table reference
     */
    constructor(): this(DSL.name("vector_store_3072"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VectorStore_3072Record>?, parentPath: InverseForeignKey<out Record, VectorStore_3072Record>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VECTOR_STORE_3072, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VectorStore_3072Path : VectorStore_3072, Path<VectorStore_3072Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VectorStore_3072Record>?, parentPath: InverseForeignKey<out Record, VectorStore_3072Record>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VectorStore_3072Record>): super(alias, aliased)
        override fun `as`(alias: String): VectorStore_3072Path = VectorStore_3072Path(DSL.name(alias), this)
        override fun `as`(alias: Name): VectorStore_3072Path = VectorStore_3072Path(alias, this)
        override fun `as`(alias: Table<*>): VectorStore_3072Path = VectorStore_3072Path(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getUniqueKeys(): List<UniqueKey<VectorStore_3072Record>> = listOf(VECTOR_STORE_3072_QUESTION_ID_JIRA_ISSUE_ID_VECTOR_MODEL_ID_KEY)
    override fun getReferences(): List<ForeignKey<VectorStore_3072Record, *>> = listOf(VECTOR_STORE_3072__VECTOR_STORE_3072_JIRA_ISSUE_ID_FKEY, VECTOR_STORE_3072__VECTOR_STORE_3072_QUESTION_ID_FKEY, VECTOR_STORE_3072__VECTOR_STORE_3072_VECTOR_MODEL_ID_FKEY)

    private lateinit var _jiraIssues: JiraIssuesPath

    /**
     * Get the implicit join path to the <code>public.jira_issues</code> table.
     */
    fun jiraIssues(): JiraIssuesPath {
        if (!this::_jiraIssues.isInitialized)
            _jiraIssues = JiraIssuesPath(this, VECTOR_STORE_3072__VECTOR_STORE_3072_JIRA_ISSUE_ID_FKEY, null)

        return _jiraIssues;
    }

    val jiraIssues: JiraIssuesPath
        get(): JiraIssuesPath = jiraIssues()

    private lateinit var _questions: QuestionsPath

    /**
     * Get the implicit join path to the <code>public.questions</code> table.
     */
    fun questions(): QuestionsPath {
        if (!this::_questions.isInitialized)
            _questions = QuestionsPath(this, VECTOR_STORE_3072__VECTOR_STORE_3072_QUESTION_ID_FKEY, null)

        return _questions;
    }

    val questions: QuestionsPath
        get(): QuestionsPath = questions()

    private lateinit var _vectorModels: VectorModelsPath

    /**
     * Get the implicit join path to the <code>public.vector_models</code>
     * table.
     */
    fun vectorModels(): VectorModelsPath {
        if (!this::_vectorModels.isInitialized)
            _vectorModels = VectorModelsPath(this, VECTOR_STORE_3072__VECTOR_STORE_3072_VECTOR_MODEL_ID_FKEY, null)

        return _vectorModels;
    }

    val vectorModels: VectorModelsPath
        get(): VectorModelsPath = vectorModels()
    override fun getChecks(): List<Check<VectorStore_3072Record>> = listOf(
        Internal.createCheck(this, DSL.name("vector_store_3072_check"), "((((question_id IS NOT NULL) AND (jira_issue_id IS NULL)) OR ((question_id IS NULL) AND (jira_issue_id IS NOT NULL))))", true)
    )
    override fun `as`(alias: String): VectorStore_3072 = VectorStore_3072(DSL.name(alias), this)
    override fun `as`(alias: Name): VectorStore_3072 = VectorStore_3072(alias, this)
    override fun `as`(alias: Table<*>): VectorStore_3072 = VectorStore_3072(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VectorStore_3072 = VectorStore_3072(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VectorStore_3072 = VectorStore_3072(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VectorStore_3072 = VectorStore_3072(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VectorStore_3072 = VectorStore_3072(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VectorStore_3072 = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VectorStore_3072 = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VectorStore_3072 = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VectorStore_3072 = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VectorStore_3072 = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VectorStore_3072 = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VectorStore_3072 = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VectorStore_3072 = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VectorStore_3072 = where(DSL.notExists(select))
}
