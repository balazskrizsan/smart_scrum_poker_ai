/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.ssp_ai_backend.db.tables


import com.kbalazsworks.ssp_ai_backend.db.Public
import com.kbalazsworks.ssp_ai_backend.db.keys.QUESTIONS_PKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_1536__VECTOR_STORE_1536_QUESTION_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.VECTOR_STORE_3072__VECTOR_STORE_3072_QUESTION_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.tables.VectorStore_1536.VectorStore_1536Path
import com.kbalazsworks.ssp_ai_backend.db.tables.VectorStore_3072.VectorStore_3072Path
import com.kbalazsworks.ssp_ai_backend.db.tables.records.QuestionsRecord

import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Questions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, QuestionsRecord>?,
    parentPath: InverseForeignKey<out Record, QuestionsRecord>?,
    aliased: Table<QuestionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<QuestionsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.questions</code>
         */
        val QUESTIONS: Questions = Questions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<QuestionsRecord> = QuestionsRecord::class.java

    /**
     * The column <code>public.questions.id</code>.
     */
    val ID: TableField<QuestionsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.questions.question</code>.
     */
    val QUESTION: TableField<QuestionsRecord, String?> = createField(DSL.name("question"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.questions.created_at</code>.
     */
    val CREATED_AT: TableField<QuestionsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<QuestionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<QuestionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<QuestionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.questions</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.questions</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.questions</code> table reference
     */
    constructor(): this(DSL.name("questions"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, QuestionsRecord>?, parentPath: InverseForeignKey<out Record, QuestionsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, QUESTIONS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class QuestionsPath : Questions, Path<QuestionsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, QuestionsRecord>?, parentPath: InverseForeignKey<out Record, QuestionsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<QuestionsRecord>): super(alias, aliased)
        override fun `as`(alias: String): QuestionsPath = QuestionsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): QuestionsPath = QuestionsPath(alias, this)
        override fun `as`(alias: Table<*>): QuestionsPath = QuestionsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<QuestionsRecord, Long?> = super.getIdentity() as Identity<QuestionsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<QuestionsRecord> = QUESTIONS_PKEY

    private lateinit var _vectorStore_1536: VectorStore_1536Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.vector_store_1536</code> table
     */
    fun vectorStore_1536(): VectorStore_1536Path {
        if (!this::_vectorStore_1536.isInitialized)
            _vectorStore_1536 = VectorStore_1536Path(this, null, VECTOR_STORE_1536__VECTOR_STORE_1536_QUESTION_ID_FKEY.inverseKey)

        return _vectorStore_1536;
    }

    val vectorStore_1536: VectorStore_1536Path
        get(): VectorStore_1536Path = vectorStore_1536()

    private lateinit var _vectorStore_3072: VectorStore_3072Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.vector_store_3072</code> table
     */
    fun vectorStore_3072(): VectorStore_3072Path {
        if (!this::_vectorStore_3072.isInitialized)
            _vectorStore_3072 = VectorStore_3072Path(this, null, VECTOR_STORE_3072__VECTOR_STORE_3072_QUESTION_ID_FKEY.inverseKey)

        return _vectorStore_3072;
    }

    val vectorStore_3072: VectorStore_3072Path
        get(): VectorStore_3072Path = vectorStore_3072()
    override fun `as`(alias: String): Questions = Questions(DSL.name(alias), this)
    override fun `as`(alias: Name): Questions = Questions(alias, this)
    override fun `as`(alias: Table<*>): Questions = Questions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Questions = Questions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Questions = Questions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Questions = Questions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Questions = Questions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Questions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Questions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Questions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Questions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Questions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Questions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Questions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Questions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Questions = where(DSL.notExists(select))
}
