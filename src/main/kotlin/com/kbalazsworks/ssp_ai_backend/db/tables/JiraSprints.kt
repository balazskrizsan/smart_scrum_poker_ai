/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.ssp_ai_backend.db.tables


import com.kbalazsworks.ssp_ai_backend.db.Public
import com.kbalazsworks.ssp_ai_backend.db.keys.JIRA_SPRINTS_PKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.JIRA_SPRINTS__JIRA_SPRINTS_JIRA_BOARD_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.keys.JIRA_TICKET_EMBEDDINGS__JIRA_TICKET_EMBEDDINGS_JIRA_SPRINT_ID_FKEY
import com.kbalazsworks.ssp_ai_backend.db.tables.JiraBoards.JiraBoardsPath
import com.kbalazsworks.ssp_ai_backend.db.tables.JiraTicketEmbeddings.JiraTicketEmbeddingsPath
import com.kbalazsworks.ssp_ai_backend.db.tables.records.JiraSprintsRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JiraSprints(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JiraSprintsRecord>?,
    parentPath: InverseForeignKey<out Record, JiraSprintsRecord>?,
    aliased: Table<JiraSprintsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JiraSprintsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.jira_sprints</code>
         */
        val JIRA_SPRINTS: JiraSprints = JiraSprints()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JiraSprintsRecord> = JiraSprintsRecord::class.java

    /**
     * The column <code>public.jira_sprints.id</code>.
     */
    val ID: TableField<JiraSprintsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.jira_sprints.jira_board_id</code>.
     */
    val JIRA_BOARD_ID: TableField<JiraSprintsRecord, Long?> = createField(DSL.name("jira_board_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.jira_sprints.name</code>.
     */
    val NAME: TableField<JiraSprintsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.jira_sprints.created_at</code>.
     */
    val CREATED_AT: TableField<JiraSprintsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<JiraSprintsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JiraSprintsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JiraSprintsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.jira_sprints</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.jira_sprints</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.jira_sprints</code> table reference
     */
    constructor(): this(DSL.name("jira_sprints"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraSprintsRecord>?, parentPath: InverseForeignKey<out Record, JiraSprintsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, JIRA_SPRINTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JiraSprintsPath : JiraSprints, Path<JiraSprintsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JiraSprintsRecord>?, parentPath: InverseForeignKey<out Record, JiraSprintsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JiraSprintsRecord>): super(alias, aliased)
        override fun `as`(alias: String): JiraSprintsPath = JiraSprintsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JiraSprintsPath = JiraSprintsPath(alias, this)
        override fun `as`(alias: Table<*>): JiraSprintsPath = JiraSprintsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<JiraSprintsRecord, Long?> = super.getIdentity() as Identity<JiraSprintsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JiraSprintsRecord> = JIRA_SPRINTS_PKEY
    override fun getReferences(): List<ForeignKey<JiraSprintsRecord, *>> = listOf(JIRA_SPRINTS__JIRA_SPRINTS_JIRA_BOARD_ID_FKEY)

    private lateinit var _jiraBoards: JiraBoardsPath

    /**
     * Get the implicit join path to the <code>public.jira_boards</code> table.
     */
    fun jiraBoards(): JiraBoardsPath {
        if (!this::_jiraBoards.isInitialized)
            _jiraBoards = JiraBoardsPath(this, JIRA_SPRINTS__JIRA_SPRINTS_JIRA_BOARD_ID_FKEY, null)

        return _jiraBoards;
    }

    val jiraBoards: JiraBoardsPath
        get(): JiraBoardsPath = jiraBoards()

    private lateinit var _jiraTicketEmbeddings: JiraTicketEmbeddingsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.jira_ticket_embeddings</code> table
     */
    fun jiraTicketEmbeddings(): JiraTicketEmbeddingsPath {
        if (!this::_jiraTicketEmbeddings.isInitialized)
            _jiraTicketEmbeddings = JiraTicketEmbeddingsPath(this, null, JIRA_TICKET_EMBEDDINGS__JIRA_TICKET_EMBEDDINGS_JIRA_SPRINT_ID_FKEY.inverseKey)

        return _jiraTicketEmbeddings;
    }

    val jiraTicketEmbeddings: JiraTicketEmbeddingsPath
        get(): JiraTicketEmbeddingsPath = jiraTicketEmbeddings()
    override fun `as`(alias: String): JiraSprints = JiraSprints(DSL.name(alias), this)
    override fun `as`(alias: Name): JiraSprints = JiraSprints(alias, this)
    override fun `as`(alias: Table<*>): JiraSprints = JiraSprints(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JiraSprints = JiraSprints(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JiraSprints = JiraSprints(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JiraSprints = JiraSprints(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JiraSprints = JiraSprints(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JiraSprints = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JiraSprints = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JiraSprints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JiraSprints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JiraSprints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JiraSprints = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JiraSprints = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JiraSprints = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JiraSprints = where(DSL.notExists(select))
}
