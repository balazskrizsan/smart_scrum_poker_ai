/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.ssp_ai_backend.db.routines


import com.kbalazsworks.ssp_ai_backend.db.Public

import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
@Suppress("UNCHECKED_CAST")
open class ArrayToVector4 : AbstractRoutine<Any>("array_to_vector", Public.PUBLIC, DefaultDataType.getDefaultDataType("\"public\".\"vector\"")) {
    companion object {
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val RETURN_VALUE: Parameter<Any?> = Internal.createParameter("RETURN_VALUE", DefaultDataType.getDefaultDataType("\"public\".\"vector\""), false, false)

        /**
         * The parameter <code>public.array_to_vector._1</code>.
         */
        val _1: Parameter<Array<BigDecimal?>?> = Internal.createParameter("_1", SQLDataType.NUMERIC.array(), false, true)

        /**
         * The parameter <code>public.array_to_vector._2</code>.
         */
        val _2: Parameter<Int?> = Internal.createParameter("_2", SQLDataType.INTEGER, false, true)

        /**
         * The parameter <code>public.array_to_vector._3</code>.
         */
        val _3: Parameter<Boolean?> = Internal.createParameter("_3", SQLDataType.BOOLEAN, false, true)
    }

    init {
        returnParameter = ArrayToVector4.RETURN_VALUE
        addInParameter(ArrayToVector4._1)
        addInParameter(ArrayToVector4._2)
        addInParameter(ArrayToVector4._3)
        setOverloaded(true)
    }

    /**
     * Set the <code>_1</code> parameter IN value to the routine
     */
    fun set__1(value: Array<BigDecimal?>?): Unit = setValue(ArrayToVector4._1, value)

    /**
     * Set the <code>_1</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__1(field: Field<Array<BigDecimal?>?>): Unit {
        setField(ArrayToVector4._1, field)
    }

    /**
     * Set the <code>_2</code> parameter IN value to the routine
     */
    fun set__2(value: Int?): Unit = setValue(ArrayToVector4._2, value)

    /**
     * Set the <code>_2</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__2(field: Field<Int?>): Unit {
        setField(ArrayToVector4._2, field)
    }

    /**
     * Set the <code>_3</code> parameter IN value to the routine
     */
    fun set__3(value: Boolean?): Unit = setValue(ArrayToVector4._3, value)

    /**
     * Set the <code>_3</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__3(field: Field<Boolean?>): Unit {
        setField(ArrayToVector4._3, field)
    }
}
