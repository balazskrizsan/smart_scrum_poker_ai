/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.ssp_ai_backend.db.routines


import com.kbalazsworks.ssp_ai_backend.db.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VectorTypmodIn : AbstractRoutine<Int>("vector_typmod_in", Public.PUBLIC, SQLDataType.INTEGER) {
    companion object {

        /**
         * The parameter <code>public.vector_typmod_in.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Int?> = Internal.createParameter("RETURN_VALUE", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>public.vector_typmod_in._1</code>.
         */
        val _1: Parameter<Array<Any?>?> = Internal.createParameter("_1", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"cstring\"").array(), false, true)
    }

    init {
        returnParameter = VectorTypmodIn.RETURN_VALUE
        addInParameter(VectorTypmodIn._1)
    }

    /**
     * Set the <code>_1</code> parameter IN value to the routine
     */
    fun set__1(value: Array<Any?>?): Unit = setValue(VectorTypmodIn._1, value)

    /**
     * Set the <code>_1</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__1(field: Field<Array<Any?>?>): Unit {
        setField(VectorTypmodIn._1, field)
    }
}
